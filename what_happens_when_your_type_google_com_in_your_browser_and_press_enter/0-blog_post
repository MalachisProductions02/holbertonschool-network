# What Happens When You Type https://www.google.com and Press Enter?

Have you ever wondered what happens behind the scenes when you type a URL like `https://www.google.com` into your browser and press Enter? Although this action may seem simple, it triggers a complex chain of events involving networking, security, hardware, software, and the internet infrastructure itself.

In this post, we’ll walk through the main components involved in this process, including DNS, TCP/IP, firewalls, SSL, load balancers, web and application servers, and databases.

---

## 1. DNS Resolution (Domain Name System)

The first step is to resolve the human-readable domain name (`www.google.com`) into an IP address that your computer can connect to.

- Your browser checks its internal cache to see if it already knows the IP address.
- If not found, it checks your operating system's DNS cache.
- If still not found, it queries a DNS resolver (usually provided by your ISP).
- The resolver asks root DNS servers → `.com` TLD servers → Google’s authoritative DNS servers.
- Finally, the resolver gets the IP address (e.g., `142.250.64.100`) and sends it back to your browser.

---

## 2. TCP/IP and Socket Connection

With the IP address known, your browser initiates a **TCP (Transmission Control Protocol)** connection to the server.

- TCP works on top of IP (Internet Protocol).
- A **3-way handshake** happens:
  - SYN → SYN-ACK → ACK
- This ensures a reliable connection is established between your device and Google’s server over port 443 (used for HTTPS).
- TCP/IP handles data segmentation, routing, and packet delivery.

---

## 3. Firewall

Your operating system and your router both likely have firewalls.

- These filter outgoing and incoming packets based on rules (e.g., allow traffic on port 443).
- The server-side (Google) also has firewalls to restrict and protect internal services.
- Firewalls ensure only legitimate traffic reaches the server and helps mitigate attacks.

---

## 4. HTTPS and SSL/TLS Handshake

Because the URL starts with `https`, an **SSL/TLS handshake** is initiated right after the TCP connection is established.

- The browser and server exchange cryptographic information to securely encrypt the session.
- The server sends its SSL certificate, signed by a Certificate Authority (CA).
- The browser verifies the certificate and generates a symmetric session key.
- All future communication is encrypted using this session key.

This process ensures **confidentiality**, **integrity**, and **authentication**.

---

## 5. Load Balancer

When your request reaches Google’s infrastructure, it likely hits a **load balancer** first.

- A load balancer distributes incoming traffic across multiple backend servers.
- It ensures no single server is overwhelmed and increases reliability and scalability.
- It may use algorithms like round-robin, least-connections, or IP hash.

---

## 6. Web Server

The load balancer forwards the request to a **web server** (e.g., Apache, Nginx, or Google’s proprietary server).

- The web server handles HTTP/S requests and serves static content (HTML, CSS, JS, images).
- For dynamic content, it passes the request to an application server.

---

## 7. Application Server

The **application server** (e.g., based on Python, Go, Java, or other languages) processes the business logic.

- It handles user sessions, input validation, search queries, etc.
- For search requests, it takes the query and interacts with backend services like databases or indexes.

---

## 8. Database

Finally, the application server may query a **database** to get the information needed.

- In Google's case, this could be a massive, distributed database or search index.
- Databases are optimized for speed and can handle millions of queries per second.

The data is retrieved, formatted, and sent back through the stack:
**Database → Application Server → Web Server → Load Balancer → Browser**

---

## 9. Rendering in the Browser

Once the browser receives the response (usually HTML + CSS + JS):

- It parses the HTML and builds the **DOM (Document Object Model)**.
- CSS is applied to style the page.
- JavaScript is executed to provide interactivity.
- The page is rendered and displayed to you — often in under 200ms.

---

## Final Thoughts

Typing `https://www.google.com` triggers a remarkable series of actions — from DNS lookups and TCP/IP handshakes to encrypted connections, load balancing, application logic, and data retrieval.

Understanding this process helps you appreciate the complexity of the web and is crucial for developers, DevOps engineers, SREs, and anyone working in tech.

---

// Put this text in Linkedyn when you're home
